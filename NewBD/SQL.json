{
  "script": [
    "auto_generator":
    """execute block
returns (
    --  NAME_TRIG varchar(200),
    NAME_TABLE varchar(200),
    NAME_FIELD varchar(200),
    NAME_GEN varchar(200))
as
declare variable NAME_TRIG varchar(200);
begin
  for select upper(trim(R.RDB$GENERATOR_NAME)) NAME_GEN
      from RDB$GENERATORS R
      where R.RDB$GENERATOR_NAME not like '%RDB$%' and
            R.RDB$GENERATOR_NAME not like '%SQL$%'
      into :NAME_GEN
  do
  begin
    for with PK_NAME
        as (select upper(INS.RDB$FIELD_NAME) F_NAME, upper(I.RDB$RELATION_NAME) T_NAME
            from RDB$INDICES I
            inner join RDB$INDEX_SEGMENTS INS on INS.RDB$INDEX_NAME = I.RDB$INDEX_NAME
            where I.RDB$INDEX_ID = 1 and
                  I.RDB$UNIQUE_FLAG = 1)
        select upper(T.RDB$TRIGGER_NAME) NAME_TRIG, upper(T.RDB$RELATION_NAME) NAME_TABLE, P.F_NAME
        from RDB$TRIGGERS T
        inner join PK_NAME P on P.T_NAME = upper(T.RDB$RELATION_NAME)
        inner join RDB$RELATION_FIELDS RF on RF.RDB$FIELD_NAME = P.F_NAME and
              RF.RDB$RELATION_NAME = T.RDB$RELATION_NAME
        inner join RDB$FIELDS R on RF.RDB$FIELD_SOURCE = R.RDB$FIELD_NAME
        where upper(T.RDB$TRIGGER_SOURCE) like '%' || :NAME_GEN || ',%' and
              T.RDB$TRIGGER_INACTIVE = 0 and
              T.RDB$TRIGGER_TYPE = 1 and
              R.RDB$FIELD_TYPE = 8 and
              R.RDB$NULL_FLAG = 1
        into :NAME_TRIG, :NAME_TABLE, :NAME_FIELD
    do
    begin
      suspend;
    end
  end
end
""""
  ]
}
SQL = dict(aut_gen=, one_doc="""
execute block
returns (
  ID_DOC integer)
as
declare variable ARTIKUL integer;
declare variable ID_DEPART integer;
declare variable KOL_ALL numeric(18,6);
declare variable ID_POSDOC integer;
begin
  for select
      ID_DEPART from
      NALIC
    group by ID_DEPART
    into :ID_DEPART
  do
  begin
    insert into DOC (ID_OPER, ID_DEPART, ID_CLIENT_TO, ID_CLIENT_FROM)
    values (15, :ID_DEPART, :ID_DEPART, :ID_DEPART);
    select
      max(ID_DOC) from
      DOC
    into :ID_DOC;
    suspend;
    for select
        ARTIKUL,
        KOL_ALL from
        NALIC
      where ID_DEPART = :ID_DEPART
      into :ARTIKUL, :KOL_ALL
    do
    begin
      update POSDOC PD
      set PD.ID_DOC = :ID_DOC,
          PD.KOL_ALL = :KOL_ALL,
          PD.ID_POSDOC_PARRENT = 0,
          PD.ID_OPER = 15,
          PD.STATE_POSDOC = 0
      where PD.ARTIKUL = :ARTIKUL and
            PD.ID_DEPART = :ID_DEPART and
            PD.ID_POSDOC in (select first 1
                               P.ID_POSDOC from
                               POSDOC P
                             inner join DOC D on D.ID_DOC = P.ID_DOC
                             inner join OPER O on O.ID_OPER = D.ID_OPER
                             where O.MOVE_TYPE = 1 and
                                   P.ARTIKUL = PD.ARTIKUL and
                                   D.ID_DEPART = :ID_DEPART);

      select
        ID_POSDOC from
        POSDOC
      where ID_DOC = :ID_DOC and
            ARTIKUL = :ARTIKUL
      into :ID_POSDOC;

      update ARTIKUL
      set ID_DOC = :ID_DOC,
          PRIMARY_ARTIKUL = 0,
          PACK_ARTIKUL = 0
      where ARTIKUL = :ARTIKUL;

      update MDLP_POS PD
      set PD.ID_DOC = :ID_DOC,
          PD.ID_POSDOC = :ID_POSDOC
      where PD.ARTIKUL = :ARTIKUL and
            PD.ID_POSDOC in (select
                               P.ID_POSDOC from
                               POSDOC P
                             inner join DOC D on D.ID_DOC = P.ID_DOC
                             inner join OPER O on O.ID_OPER = D.ID_OPER
                             where O.MOVE_TYPE = 1 and
                                   P.ARTIKUL = PD.ARTIKUL and
                                   D.ID_DEPART = :ID_DEPART);
    end
    execute procedure WRITE_DOC_SUM(:ID_DOC);

  end
end
""", del_err_tovar="""
delete from tovar where id_tovar in (
select id_tovar from (

select
       case
         when A.EAN13 similar to '[0-9]+' -- проверка на правильность заполнения EAN13, если не правильно, берем EAN13 из таблицы TOVAR, если и там не верно, берем из PREP
       and LEN(A.EAN13) = 13 and left(A.EAN13, 1) <> '2' and A.EAN13 <> '0000000000000' and (right(A.EAN13, 1) = right(10 - cast(right(((cast(substring(A.EAN13 from 12 for 1) as int) + -- расчет контольной суммы
       cast(substring(A.EAN13 from 10 for 1) as int) + cast(substring(A.EAN13 from 8 for 1) as int) + cast(substring(A.EAN13 from 6 for 1) as int) + cast(substring(A.EAN13 from 4 for 1) as int) + cast(substring(A.EAN13 from 2 for 1) as int)) * 3) + ((cast(substring(A.EAN13 from 11 for 1) as int) + cast(substring(A.EAN13 from 9 for 1) as int) + cast(substring(A.EAN13 from 7 for 1) as int) + cast(substring(A.EAN13 from 5 for 1) as int) + cast(substring(A.EAN13 from 3 for 1) as int) + cast(substring(A.EAN13 from 1 for 1) as int))), 1) as int), 1)) then A.EAN13
         else '-1'
       end as EAN13,
       A.ID_TOVAR
from TOVAR A   ) where ean13 = '-1' )""",
           doc_reg="""
               execute procedure doc_reg(%s)
           """)

delete = dict(nalic="delete from nalic where id_nalic > 0 ",
              nalic_srez="delete from nalic_srez where id_srez > 0",
              mdlp_pos_inactive_trig="ALTER TRIGGER MDLP_POS_CUR_NALIC_AD INACTIVE",
              mdlp_pos="delete from mdlp_pos where prim > 0 and id_posdoc not in (select id_posdoc from posdoc where id_doc in (%s))",
              mdlp_pos_cur_nalic="delete from mdlp_pos where prim > 0 and cur_nalic = 0",
              mdlp_pos_vozvrat="delete from mdlp_pos where prim > 0 and ID_CHECK_POS > 0",
              mdlp_pos_active_trig="ALTER TRIGGER MDLP_POS_CUR_NALIC_AD ACTIVE",
              mdlp_doc="delete from mdlp_doc where prim > 0",
              mdlp_sgtin="delete from mdlp_sgtin where prim > 0 and prim not in (select id_sgtin from mdlp_pos where id_posdoc in (select id_posdoc from posdoc where id_doc in (%s)))",
              mdlp_sscc_update="update mdlp_sscc set id_sscc_up = 0, id_sscc = 0",
              mdlp_sscc="delete from mdlp_sscc where prim > 0 and prim not in (select id_sscc from mdlp_sgtin group by 1)",
              mdlp_log="delete from mdlp_log where prim > 0",

              rpo_reserved="delete from rpo_reserved where ID_RPO_RESERVED > 0",
              rpo_component="delete from rpo_components where ID_RPO_COMPONENT > 0",
              rpo_posdoc="delete from rpo_posdoc where id_rpo_posdoc > 0",
              rpo_doc="delete from rpo_doc where id_rpo_doc > 0",

              order_depart="delete from order_depart",
              order_posdoc="delete from order_posdoc where id_order_posdoc > 0",
              order_doc="delete from order_doc where id_order_doc > 0",

              provider_artikul="delete from provider_artikul where provider_artikul_id > 0",
              remains_artikul="delete from remains_artikul",
              tender_artikul="delete from tender_artikul where ID_TARTIKUL > 0",

              checkdoc="delete from checkdoc where id_checkdoc > 0",
              check_pos="delete from check_pos where prim > 0",
              check_payments="delete from check_payments where payment_id > 0",
              chek_kkm_surce="delete from check_kkm where check_id > 0 and SOURCE_DOCUMENT is not null",
              check_kkm="delete from check_kkm where check_id > 0",

              discount_card_log="delete from discount_card_log",
              discount_card_ulog="delete from discount_card_ulog",
              tmp_out_doc="delete from tmpoutdoc",

              doc_link="delete from doc_link where prim > 0",
              doc_mode="delete from doc_mode",
              posdoc_update="update posdoc set id_posdoc_parrent = 0 where id_posdoc_parrent <> 0",
              posdoc="delete from posdoc where id_posdoc > 0 and id_posdoc not in (select id_posdoc from posdoc where id_doc in (%s))",
              artikul="delete from artikul where artikul > 0 and id_doc not in (%s)",
              doc_update="update doc set id_doc_parrent = 0 where id_doc_parrent <> 0",
              doc_update_id_doc_from="update doc set id_doc_from = 0 where id_doc_from <> 0",
              doc_inactive_trig="ALTER TRIGGER DOC_AUTONUM_BD INACTIVE",
              doc_inactive_trig_1="ALTER TRIGGER DOC_AD INACTIVE",
              doc="delete from doc where id_doc > 0 and id_doc not in (%s)",
              doc_active_trig="ALTER TRIGGER DOC_AUTONUM_BD ACTIVE",
              doc_active_trig_1="ALTER TRIGGER DOC_AD ACTIVE",
              doc_log="delete from doc_log",
              posdoc_log="delete from posdoc_log",
              nalic_log="delete from nalic_log",

              checklist="delete from checklist where  id_checklist > 0",

              user_connecrion_log="delete from user_connection_log where id_user_connection > 0",
              checkdoc_log="delete from checkdoc_log"
              )
